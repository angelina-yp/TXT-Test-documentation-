GitHub. HW_2
1. На локальном репозитории сделать ветки для:
- Postman
- Jmeter
- CheckLists
- Bug Reports
- SQL
- Charles
- Mobile testing

 git branch
2. Запушить все ветки на внешний репозиторий

git checkout CheckLists
git checkout Bug_Reports
git checkout SQL
git checkout Charles
git checkout Mobile_testing

git checkout Jmeter && git push -u origin Jmeter 
git push -u origin --all
3. В ветке Bug_Reports сделать текстовый документ со структурой баг репорта
git checkout Bug_Reports
touch BugReports.txt
vim BugReports.txt
Структура баг-репорта:
1.Краткое описание проблемы
2.Продукт
3.Платформа
4.Статус
5.Приоритет
6.Серьезность
7.Предусловия
8.Шаги воспроизведения
9.Фактический результат
10.Ожидаемый результат
11.Прикрепленные файлы
esc :wq!
4. Запушить структуру багрепорта на внешний репозиторий

git add . && git commit -m "Reports" && git push
5. Вмержить ветку Bag Reports в Main
git checkout main
git merge Bug_reports

6. Запушить main на внешний репозиторий.
git push -u origin main

7. В ветке CheckLists набросать структуру чек листа.
git checkout CheckLists
vim CheckLists.txt
Чек-лист
1.Раздел «Заголовок»:
-Проверка работы кнопки «Свернуть приложение».
-Проверка работы кнопки «Развернуть приложение».
-Проверка работы кнопки «Закрыть приложение».
2.Раздел «Содержимое окна»:
-Проверка ввода текста в поле ввода текста (числа, буквы, спецсимволы).
-Проверка работы вертикального скролла (полосы прокрутки).
4.Дополнительная проверка:
-Проверка работы кнопки «Свернуть приложение».
-Проверка работы функционала разворачивания приложения из панели задач.
-Проверка работы кнопки «Развернуть приложение».
-Проверка работы кнопки «Закрыть приложение».

8. Запушить структуру на внешний репозиторий
git add . && git commit -m "CheckLists" && git push

9. На внешнем репозитории сделать Pull Request ветки CheckLists в main
на внешнем репозитории нажать вверху pull reques => git fetch

10. Синхронизировать Внешнюю и Локальную ветки Main
git pull
